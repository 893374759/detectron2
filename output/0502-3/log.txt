[05/02 17:53:19] detectron2 INFO: Command line arguments: Namespace(config_file='./configs/COCO-InstanceSegmentation/faster_rcnn_X-101-64x4d-FPN_3x.yaml', dist_url='tcp://127.0.0.1:50164', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['SOLVER.IMS_PER_BATCH', '4'], resume=False)
[05/02 17:53:19] detectron2 INFO: Contents of args.config_file=./configs/COCO-InstanceSegmentation/faster_rcnn_X-101-64x4d-FPN_3x.yaml:
# source:   faster_rcnn_X_101_32x8d_FPN_3x.yaml
# from: e2e_faster_rcnn_X_101_64x4d_FPN_1x.yaml
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  MASK_ON: False
  # WEIGHTS: "./PretrainedModel/PubLayNet/model_final.pkl"
  # PIXEL_STD: [57.375, 57.120, 58.395]
  RESNETS:
    STRIDE_IN_1X1: False  # this is a C2 model
    NUM_GROUPS: 64
    WIDTH_PER_GROUP: 4
    DEPTH: 101
  ROI_HEADS:
    NUM_CLASSES: 5
    NMS_THRESH_TEST: 0.5
  RETINANET:
    NUM_CLASSES: 5
  ROI_BOX_HEAD: 
    POOLER_SAMPLING_RATIO: 2
  RPN:
    BATCH_SIZE_PER_IMAGE: 512
    PRE_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TEST: 1000
  ANCHOR_GENERATOR:
    SIZES: [[32], [64], [128], [256], [512]]
DATASETS:
  TRAIN: ("medline_train",)
  TEST: ("medline_val",)
SOLVER:
  STEPS: [120000, 160000]
  MAX_ITER: 180000
  WEIGHT_DECAY: 0.0001
  BASE_LR: 0.01
  GAMMA: 0.1
  IMS_PER_BATCH: 8
INPUT:
  MIN_SIZE_TRAIN: (400,)
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 400
  MAX_SIZE_TEST: 512
TEST:
  AUG:
    FLIP: False

[05/02 17:53:19] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('medline_val',)
  TRAIN: ('medline_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 512
  MAX_SIZE_TRAIN: 512
  MIN_SIZE_TEST: 400
  MIN_SIZE_TRAIN: (400,)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 101
    NORM: FrozenBN
    NUM_GROUPS: 64
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: False
    WIDTH_PER_GROUP: 4
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 5
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 5
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 512
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: 
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  BASE_LR: 0.01
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 4
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 180000
  MOMENTUM: 0.9
  NESTEROV: False
  STEPS: (120000, 160000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: False
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[05/02 17:53:19] detectron2 INFO: Full config saved to ./output/config.yaml
[05/02 17:53:19] d2.utils.env INFO: Using a generated random seed 19797108
[05/02 17:53:25] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv2): Conv2d(
            1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv3): Conv2d(
            1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv2): Conv2d(
            2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv3): Conv2d(
            2048, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=2, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=2, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=2, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=2, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=6, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=20, bias=True)
    )
  )
)
[05/02 17:54:12] d2.data.datasets.coco INFO: Loading /Datadisk/shared-corpus/publaynet/publaynet/annotations/instances_train.json takes 46.65 seconds.
[05/02 17:54:13] d2.data.datasets.coco INFO: Loaded 335703 images in COCO format from /Datadisk/shared-corpus/publaynet/publaynet/annotations/instances_train.json
[05/02 17:54:30] d2.data.build INFO: Removed 0 images with no usable annotations. 335703 images left.
[05/02 17:54:39] d2.data.build INFO: Distribution of instances among all 5 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    text    | 2343356      |   title    | 627125       |    list    | 80759        |
|   table    | 102514       |   figure   | 109292       |            |              |
|   total    | 3263046      |            |              |            |              |[0m
[05/02 17:54:39] d2.data.common INFO: Serializing 335703 elements to byte tensors and concatenating them all ...
[05/02 17:54:47] d2.data.common INFO: Serialized dataset takes 1576.95 MiB
[05/02 17:54:47] d2.data.detection_utils INFO: TransformGens used in training: [ResizeShortestEdge(short_edge_length=(400,), max_size=512, sample_style='choice'), RandomFlip()]
[05/02 17:54:47] d2.data.build INFO: Using training sampler TrainingSampler
[05/02 17:54:52] fvcore.common.checkpoint INFO: No checkpoint found. Initializing model from scratch
[05/02 17:54:52] d2.engine.train_loop INFO: Starting training from iteration 0
[05/02 17:55:08] d2.utils.events INFO:  eta: 1 day, 11:54:11  iter: 19  total_loss: 3.369  loss_cls: 1.593  loss_box_reg: 0.074  loss_rpn_cls: 0.479  loss_rpn_loc: 1.158  time: 0.7161  data_time: 0.0320  lr: 0.000200  max_mem: 3170M
[05/02 17:55:22] d2.utils.events INFO:  eta: 1 day, 11:56:18  iter: 39  total_loss: 3.175  loss_cls: 2.159  loss_box_reg: 0.160  loss_rpn_cls: 0.381  loss_rpn_loc: 0.701  time: 0.7181  data_time: 0.0090  lr: 0.000400  max_mem: 3170M
[05/02 17:55:37] d2.utils.events INFO:  eta: 1 day, 12:02:28  iter: 59  total_loss: 1.759  loss_cls: 0.748  loss_box_reg: 0.129  loss_rpn_cls: 0.374  loss_rpn_loc: 0.461  time: 0.7200  data_time: 0.0094  lr: 0.000599  max_mem: 3170M
[05/02 17:55:51] d2.utils.events INFO:  eta: 1 day, 12:04:13  iter: 79  total_loss: 1.295  loss_cls: 0.351  loss_box_reg: 0.153  loss_rpn_cls: 0.367  loss_rpn_loc: 0.434  time: 0.7206  data_time: 0.0094  lr: 0.000799  max_mem: 3170M
[05/02 17:56:06] d2.utils.events INFO:  eta: 1 day, 12:02:29  iter: 99  total_loss: 1.153  loss_cls: 0.218  loss_box_reg: 0.139  loss_rpn_cls: 0.359  loss_rpn_loc: 0.363  time: 0.7203  data_time: 0.0087  lr: 0.000999  max_mem: 3170M
[05/02 17:56:20] d2.utils.events INFO:  eta: 1 day, 12:01:12  iter: 119  total_loss: 1.071  loss_cls: 0.221  loss_box_reg: 0.147  loss_rpn_cls: 0.328  loss_rpn_loc: 0.349  time: 0.7200  data_time: 0.0086  lr: 0.001199  max_mem: 3170M
[05/02 17:56:34] d2.utils.events INFO:  eta: 1 day, 12:01:10  iter: 139  total_loss: 1.102  loss_cls: 0.250  loss_box_reg: 0.166  loss_rpn_cls: 0.320  loss_rpn_loc: 0.369  time: 0.7199  data_time: 0.0088  lr: 0.001399  max_mem: 3170M
[05/02 17:56:49] d2.utils.events INFO:  eta: 1 day, 12:00:43  iter: 159  total_loss: 0.970  loss_cls: 0.203  loss_box_reg: 0.227  loss_rpn_cls: 0.284  loss_rpn_loc: 0.286  time: 0.7201  data_time: 0.0085  lr: 0.001598  max_mem: 3170M
[05/02 17:57:03] d2.utils.events INFO:  eta: 1 day, 11:59:21  iter: 179  total_loss: 1.023  loss_cls: 0.197  loss_box_reg: 0.171  loss_rpn_cls: 0.291  loss_rpn_loc: 0.339  time: 0.7199  data_time: 0.0086  lr: 0.001798  max_mem: 3170M
[05/02 17:57:18] d2.utils.events INFO:  eta: 1 day, 11:58:03  iter: 199  total_loss: 1.056  loss_cls: 0.216  loss_box_reg: 0.183  loss_rpn_cls: 0.270  loss_rpn_loc: 0.354  time: 0.7198  data_time: 0.0092  lr: 0.001998  max_mem: 3170M
[05/02 17:57:32] d2.utils.events INFO:  eta: 1 day, 11:57:39  iter: 219  total_loss: 1.042  loss_cls: 0.206  loss_box_reg: 0.170  loss_rpn_cls: 0.274  loss_rpn_loc: 0.393  time: 0.7197  data_time: 0.0094  lr: 0.002198  max_mem: 3170M
[05/02 17:57:46] d2.utils.events INFO:  eta: 1 day, 11:56:59  iter: 239  total_loss: 0.966  loss_cls: 0.208  loss_box_reg: 0.187  loss_rpn_cls: 0.253  loss_rpn_loc: 0.342  time: 0.7196  data_time: 0.0091  lr: 0.002398  max_mem: 3170M
[05/02 17:58:01] d2.utils.events INFO:  eta: 1 day, 11:56:33  iter: 259  total_loss: 1.059  loss_cls: 0.233  loss_box_reg: 0.240  loss_rpn_cls: 0.241  loss_rpn_loc: 0.321  time: 0.7196  data_time: 0.0091  lr: 0.002597  max_mem: 3170M
[05/02 17:58:15] d2.utils.events INFO:  eta: 1 day, 11:56:06  iter: 279  total_loss: 1.099  loss_cls: 0.228  loss_box_reg: 0.257  loss_rpn_cls: 0.262  loss_rpn_loc: 0.338  time: 0.7194  data_time: 0.0093  lr: 0.002797  max_mem: 3170M
[05/02 17:58:29] d2.utils.events INFO:  eta: 1 day, 11:55:32  iter: 299  total_loss: 1.047  loss_cls: 0.227  loss_box_reg: 0.235  loss_rpn_cls: 0.226  loss_rpn_loc: 0.378  time: 0.7189  data_time: 0.0092  lr: 0.002997  max_mem: 3170M
[05/02 17:58:44] d2.utils.events INFO:  eta: 1 day, 11:55:01  iter: 319  total_loss: 0.999  loss_cls: 0.216  loss_box_reg: 0.252  loss_rpn_cls: 0.224  loss_rpn_loc: 0.290  time: 0.7188  data_time: 0.0089  lr: 0.003197  max_mem: 3170M
[05/02 17:58:58] d2.utils.events INFO:  eta: 1 day, 11:55:04  iter: 339  total_loss: 0.983  loss_cls: 0.210  loss_box_reg: 0.229  loss_rpn_cls: 0.217  loss_rpn_loc: 0.314  time: 0.7188  data_time: 0.0093  lr: 0.003397  max_mem: 3170M
[05/02 17:59:13] d2.utils.events INFO:  eta: 1 day, 11:55:24  iter: 359  total_loss: 0.938  loss_cls: 0.210  loss_box_reg: 0.224  loss_rpn_cls: 0.238  loss_rpn_loc: 0.297  time: 0.7191  data_time: 0.0092  lr: 0.003596  max_mem: 3170M
[05/02 17:59:27] d2.utils.events INFO:  eta: 1 day, 11:55:37  iter: 379  total_loss: 1.011  loss_cls: 0.219  loss_box_reg: 0.267  loss_rpn_cls: 0.208  loss_rpn_loc: 0.340  time: 0.7194  data_time: 0.0087  lr: 0.003796  max_mem: 3170M
[05/02 17:59:42] d2.utils.events INFO:  eta: 1 day, 11:55:32  iter: 399  total_loss: 1.042  loss_cls: 0.233  loss_box_reg: 0.273  loss_rpn_cls: 0.223  loss_rpn_loc: 0.283  time: 0.7196  data_time: 0.0088  lr: 0.003996  max_mem: 3170M
[05/02 17:59:56] d2.utils.events INFO:  eta: 1 day, 11:55:18  iter: 419  total_loss: 1.055  loss_cls: 0.222  loss_box_reg: 0.246  loss_rpn_cls: 0.203  loss_rpn_loc: 0.351  time: 0.7196  data_time: 0.0097  lr: 0.004196  max_mem: 3170M
[05/02 18:00:10] d2.utils.events INFO:  eta: 1 day, 11:54:59  iter: 439  total_loss: 1.042  loss_cls: 0.222  loss_box_reg: 0.258  loss_rpn_cls: 0.232  loss_rpn_loc: 0.339  time: 0.7195  data_time: 0.0095  lr: 0.004396  max_mem: 3170M
[05/02 18:00:25] d2.utils.events INFO:  eta: 1 day, 11:54:45  iter: 459  total_loss: 1.190  loss_cls: 0.219  loss_box_reg: 0.230  loss_rpn_cls: 0.225  loss_rpn_loc: 0.402  time: 0.7196  data_time: 0.0091  lr: 0.004595  max_mem: 3170M
[05/02 18:00:39] d2.utils.events INFO:  eta: 1 day, 11:54:22  iter: 479  total_loss: 1.024  loss_cls: 0.224  loss_box_reg: 0.244  loss_rpn_cls: 0.228  loss_rpn_loc: 0.336  time: 0.7194  data_time: 0.0096  lr: 0.004795  max_mem: 3170M
[05/02 18:00:54] d2.utils.events INFO:  eta: 1 day, 11:53:54  iter: 499  total_loss: 0.931  loss_cls: 0.204  loss_box_reg: 0.279  loss_rpn_cls: 0.182  loss_rpn_loc: 0.277  time: 0.7194  data_time: 0.0091  lr: 0.004995  max_mem: 3170M
[05/02 18:01:08] d2.utils.events INFO:  eta: 1 day, 11:53:38  iter: 519  total_loss: 1.043  loss_cls: 0.228  loss_box_reg: 0.280  loss_rpn_cls: 0.186  loss_rpn_loc: 0.344  time: 0.7194  data_time: 0.0089  lr: 0.005195  max_mem: 3170M
[05/02 18:01:22] d2.utils.events INFO:  eta: 1 day, 11:53:25  iter: 539  total_loss: 1.060  loss_cls: 0.211  loss_box_reg: 0.239  loss_rpn_cls: 0.229  loss_rpn_loc: 0.367  time: 0.7195  data_time: 0.0091  lr: 0.005395  max_mem: 3170M
[05/02 18:01:37] d2.utils.events INFO:  eta: 1 day, 11:53:25  iter: 559  total_loss: 1.206  loss_cls: 0.259  loss_box_reg: 0.306  loss_rpn_cls: 0.199  loss_rpn_loc: 0.378  time: 0.7196  data_time: 0.0088  lr: 0.005594  max_mem: 3170M
[05/02 18:01:51] d2.utils.events INFO:  eta: 1 day, 11:53:25  iter: 579  total_loss: 0.965  loss_cls: 0.215  loss_box_reg: 0.227  loss_rpn_cls: 0.245  loss_rpn_loc: 0.325  time: 0.7197  data_time: 0.0089  lr: 0.005794  max_mem: 3170M
[05/02 18:02:06] d2.utils.events INFO:  eta: 1 day, 11:53:18  iter: 599  total_loss: 1.157  loss_cls: 0.232  loss_box_reg: 0.231  loss_rpn_cls: 0.278  loss_rpn_loc: 0.420  time: 0.7198  data_time: 0.0089  lr: 0.005994  max_mem: 3170M
[05/02 18:02:20] d2.utils.events INFO:  eta: 1 day, 11:53:30  iter: 619  total_loss: 1.166  loss_cls: 0.233  loss_box_reg: 0.282  loss_rpn_cls: 0.238  loss_rpn_loc: 0.415  time: 0.7200  data_time: 0.0085  lr: 0.006194  max_mem: 3170M
[05/02 18:02:35] d2.utils.events INFO:  eta: 1 day, 11:53:33  iter: 639  total_loss: 1.019  loss_cls: 0.208  loss_box_reg: 0.239  loss_rpn_cls: 0.238  loss_rpn_loc: 0.357  time: 0.7201  data_time: 0.0088  lr: 0.006394  max_mem: 3170M
[05/02 18:02:49] d2.utils.events INFO:  eta: 1 day, 11:53:25  iter: 659  total_loss: 1.099  loss_cls: 0.218  loss_box_reg: 0.230  loss_rpn_cls: 0.258  loss_rpn_loc: 0.392  time: 0.7202  data_time: 0.0088  lr: 0.006593  max_mem: 3170M
[05/02 18:03:04] d2.utils.events INFO:  eta: 1 day, 11:53:35  iter: 679  total_loss: 1.171  loss_cls: 0.212  loss_box_reg: 0.212  loss_rpn_cls: 0.309  loss_rpn_loc: 0.420  time: 0.7203  data_time: 0.0089  lr: 0.006793  max_mem: 3170M
[05/02 18:03:18] d2.utils.events INFO:  eta: 1 day, 11:53:32  iter: 699  total_loss: 1.120  loss_cls: 0.245  loss_box_reg: 0.275  loss_rpn_cls: 0.242  loss_rpn_loc: 0.431  time: 0.7204  data_time: 0.0085  lr: 0.006993  max_mem: 3170M
[05/02 18:03:33] d2.utils.events INFO:  eta: 1 day, 11:53:12  iter: 719  total_loss: 1.110  loss_cls: 0.249  loss_box_reg: 0.227  loss_rpn_cls: 0.243  loss_rpn_loc: 0.359  time: 0.7203  data_time: 0.0091  lr: 0.007193  max_mem: 3170M
[05/02 18:03:47] d2.utils.events INFO:  eta: 1 day, 11:52:42  iter: 739  total_loss: 1.115  loss_cls: 0.215  loss_box_reg: 0.268  loss_rpn_cls: 0.228  loss_rpn_loc: 0.418  time: 0.7203  data_time: 0.0092  lr: 0.007393  max_mem: 3170M
[05/02 18:04:02] d2.utils.events INFO:  eta: 1 day, 11:52:11  iter: 759  total_loss: 1.059  loss_cls: 0.214  loss_box_reg: 0.273  loss_rpn_cls: 0.221  loss_rpn_loc: 0.356  time: 0.7202  data_time: 0.0095  lr: 0.007592  max_mem: 3170M
[05/02 18:04:16] d2.utils.events INFO:  eta: 1 day, 11:51:35  iter: 779  total_loss: 1.013  loss_cls: 0.196  loss_box_reg: 0.208  loss_rpn_cls: 0.212  loss_rpn_loc: 0.356  time: 0.7201  data_time: 0.0095  lr: 0.007792  max_mem: 3170M
[05/02 18:04:30] d2.utils.events INFO:  eta: 1 day, 11:51:05  iter: 799  total_loss: 1.298  loss_cls: 0.264  loss_box_reg: 0.211  loss_rpn_cls: 0.323  loss_rpn_loc: 0.426  time: 0.7200  data_time: 0.0093  lr: 0.007992  max_mem: 3170M
[05/02 18:04:41] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/home/mojianqiao/work/detectron2/detectron2/engine/train_loop.py", line 132, in train
    self.run_step()
  File "/home/mojianqiao/work/detectron2/detectron2/engine/train_loop.py", line 215, in run_step
    loss_dict = self.model(data)
  File "/home/mojianqiao/anaconda3/envs/torch12/lib/python3.7/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/mojianqiao/work/detectron2/detectron2/modeling/meta_arch/rcnn.py", line 124, in forward
    proposals, proposal_losses = self.proposal_generator(images, features, gt_instances)
  File "/home/mojianqiao/anaconda3/envs/torch12/lib/python3.7/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/mojianqiao/work/detectron2/detectron2/modeling/proposal_generator/rpn.py", line 180, in forward
    self.training,
  File "/home/mojianqiao/work/detectron2/detectron2/modeling/proposal_generator/rpn_outputs.py", line 136, in find_top_rpn_proposals
    "Predicted boxes or scores contain Inf/NaN. Training has diverged."
FloatingPointError: Predicted boxes or scores contain Inf/NaN. Training has diverged.
[05/02 18:04:41] d2.engine.hooks INFO: Overall training speed: 812 iterations in 0:09:44 (0.7204 s / it)
[05/02 18:04:41] d2.engine.hooks INFO: Total training time: 0:09:45 (0:00:00 on hooks)
Traceback (most recent call last):
  File "./tools/train_net.py", line 164, in <module>
    args=(args,),
  File "/home/mojianqiao/work/detectron2/detectron2/engine/launch.py", line 57, in launch
    main_func(*args)
  File "./tools/train_net.py", line 152, in main
    return trainer.train()
  File "/home/mojianqiao/work/detectron2/detectron2/engine/defaults.py", line 401, in train
    super().train(self.start_iter, self.max_iter)
  File "/home/mojianqiao/work/detectron2/detectron2/engine/train_loop.py", line 132, in train
    self.run_step()
  File "/home/mojianqiao/work/detectron2/detectron2/engine/train_loop.py", line 215, in run_step
    loss_dict = self.model(data)
  File "/home/mojianqiao/anaconda3/envs/torch12/lib/python3.7/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/mojianqiao/work/detectron2/detectron2/modeling/meta_arch/rcnn.py", line 124, in forward
    proposals, proposal_losses = self.proposal_generator(images, features, gt_instances)
  File "/home/mojianqiao/anaconda3/envs/torch12/lib/python3.7/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/mojianqiao/work/detectron2/detectron2/modeling/proposal_generator/rpn.py", line 180, in forward
    self.training,
  File "/home/mojianqiao/work/detectron2/detectron2/modeling/proposal_generator/rpn_outputs.py", line 136, in find_top_rpn_proposals
    "Predicted boxes or scores contain Inf/NaN. Training has diverged."
FloatingPointError: Predicted boxes or scores contain Inf/NaN. Training has diverged.
